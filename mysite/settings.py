"""
Django settings for mysite project.
Generated by 'django-admin startproject' using Django 5.2.5.
For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
from django.contrib.messages import constants as messages
from mfa.auth_settings import *
BASE_DIR = Path(__file__).resolve().parent.parent
try:
    import keyring
    from keyring.errors import NoKeyringError
    _SECRET_FROM_KEYRING = keyring.get_password('DjangoSecretKey', 'SECRET_KEY')
    _SECRET_FROM_KEYRING = (_SECRET_FROM_KEYRING or '').strip() or None
except Exception:
    _SECRET_FROM_KEYRING = None
SECRET_KEY = _SECRET_FROM_KEYRING or (os.getenv('DJANGO_SECRET_KEY') or '').strip()
if not SECRET_KEY:
    DEBUG = os.getenv('DJANGO_DEBUG', str(True)).lower() in ['1', 'true', 'yes']
    if DEBUG:
        import secrets
        SECRET_KEY = secrets.token_urlsafe(64)
    else:
        raise RuntimeError(
            'SECRET_KEY is not configured. Set it via Windows Credential Manager\n'
            "(service='DjangoSecretKey', user='SECRET_KEY') or the DJANGO_SECRET_KEY environment variable."
        )
DEBUG = True
ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://127.0.0.1:62847',
    'http://localhost:8000',
    'http://localhost:62847',
    'https://kareemelnokali.pythonanywhere.com'
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'passkeys.backend.PasskeyModelBackend',
]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mfa.apps.MfaConfig',
    'channels',
    'widget_tweaks',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'passkeys',  # Add passkeys app
]
SITE_ID = 1
SITE_DOMAIN = 'localhost:8000'
SITE_NAME = 'GreenShield Hygiene Services'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'mfa.security_middleware.SecurityTrackingMiddleware',
    'mfa.security_middleware.BehaviorTrackingMiddleware',
    'mysite.middleware.AnomalyDetectionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
if DEBUG:
    MIDDLEWARE.insert(0, 'mysite.middleware.LocalhostRedirectMiddleware')
MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}
ROOT_URLCONF = 'mysite.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'mfa.context_processors.brand_colors',
                'mfa.context_processors.role_flags',
            ],
        },
    },
]
WSGI_APPLICATION = 'mysite.wsgi.application'
ASGI_APPLICATION = 'mysite.asgi.application'

# Channels configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# Add daphne to installed apps for WebSocket support
INSTALLED_APPS.insert(0, 'daphne')
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_ADAPTER = 'mfa.adapters.SocialAdapter'
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_USERNAME_AUTOGENERATE = True
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'prompt': 'select_account'},
    }
}
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
FIDO_SERVER_ID = 'localhost'
FIDO_SERVER_NAME = 'MFA'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'karim.elnokali222@gmail.com'
EMAIL_HOST_PASSWORD = 'auwenyvnpmlveukk'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL') or (EMAIL_HOST_USER or '')
SERVER_EMAIL = os.getenv('SERVER_EMAIL') or (EMAIL_HOST_USER or '')
EMAIL_TIMEOUT = 30
MFA_EMAIL_SUBJECT = 'Your login code'
BRAND_COLOR = os.getenv('BRAND_COLOR', '#2b77ba')
BRAND_COLOR_HOVER = os.getenv('BRAND_COLOR_HOVER', '#1b3390')
BRAND_COLOR_WEAK = os.getenv('BRAND_COLOR_WEAK', '#076d6d5b')
SAFETY_PHRASE = os.getenv('SAFETY_PHRASE', 'GS-HYGIENE-KEY')
FIREBASE_CONFIG = {
    'apiKey': os.getenv('FIREBASE_API_KEY'),
    'authDomain': os.getenv('FIREBASE_AUTH_DOMAIN'),
    'projectId': os.getenv('FIREBASE_PROJECT_ID'),
    'storageBucket': os.getenv('FIREBASE_STORAGE_BUCKET'),
    'messagingSenderId': os.getenv('FIREBASE_MESSAGING_SENDER_ID'),
    'appId': os.getenv('FIREBASE_APP_ID'),
}
FIREBASE_SERVICE_ACCOUNT_KEY_PATH = os.getenv('FIREBASE_SERVICE_ACCOUNT_KEY_PATH', 'path/to/your/serviceAccountKey.json')
FORCE_DEV_OTP = os.getenv('FORCE_DEV_OTP', '0') in ['1', 'true', 'True']
DEFAULT_COUNTRY_DIAL_CODE = os.getenv('DEFAULT_COUNTRY_DIAL_CODE', '20')
try:
    import keyring
    from keyring.errors import NoKeyringError
    RECAPTCHA_SITE_KEY = keyring.get_password('DjangoRecaptcha', 'SITE_KEY')
    RECAPTCHA_SECRET_KEY = keyring.get_password('DjangoRecaptcha', 'SECRET_KEY')
    RECAPTCHA_SITE_KEY = (RECAPTCHA_SITE_KEY or '').strip() or None
    RECAPTCHA_SECRET_KEY = (RECAPTCHA_SECRET_KEY or '').strip() or None
    if not RECAPTCHA_SITE_KEY or not RECAPTCHA_SECRET_KEY:
        raise ValueError("reCAPTCHA keys not found in Windows Credential Manager")
except Exception as e:
    import warnings
    warnings.warn(f"Using environment variables for reCAPTCHA keys (less secure). {str(e)}")
    RECAPTCHA_SITE_KEY = (os.getenv('RECAPTCHA_SITE_KEY') or '').strip() or None
    RECAPTCHA_SECRET_KEY = (os.getenv('RECAPTCHA_SECRET_KEY') or '').strip() or None
